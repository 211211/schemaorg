@prefix :      <http://example.org/> .
@prefix ex:      <http://example.org/example> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix schema: <http://schema.org/> .
@prefix dct:   <http://purl.org/dc/terms/> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfa:  <http://www.w3.org/ns/rdfa#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
ex:
	sh:declare [
		sh:prefix "rdfs" ;
		sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI ;
	];
	sh:declare [
		sh:prefix "schema" ;
		sh:namespace "http://schema.org/"^^xsd:anyURI ;
	] .

:Type a sh:NodeShape, rdfs:Class ;
   sh:nodeKind sh:BlankNodeOrIRI ;
	sh:target [
		a sh:SPARQLTarget ;
		sh:prefixes ex: ;
		sh:select """
        SELECT DISTINCT ?this WHERE {
        ?this a rdfs:Class;
          rdfs:subClassOf* schema:Thing.
         }
		""" ;
	] ;
      sh:or (
      [ sh:datatype xsd:string; ]
      [ sh:datatype rdf:langString; ]
      );
  sh:property [
      sh:path rdfs:subClassOf ;
      sh:minCount 1 ;
    ] ;
  sh:property [
      sh:path dct:source ;
       sh:nodeKind xsd:string;
    ] ;
  sh:property [
      sh:path schema:category ;
      sh:or (
      [ sh:datatype xsd:string; ]
      [ sh:datatype rdf:langString; ]
      );
    ] ;
 sh:property [
      sh:path schema:isPartOf ;
      sh:in ( <http://attic.schema.org> 
	     <http://auto.schema.org> 
	     <http://bib.schema.org>
	     <http://health-lifesci.schema.org>
	     <http://iot.schema.org>
	     <http://meta.schema.org>
	     <http://pending.schema.org>
	    );
    ] ;
  sh:property [
      sh:path schema:supersededBy ;
       sh:nodeKind sh:IRI;
    ] ;
  sh:property [
      sh:path skos:exactMatch ;
       sh:nodeKind sh:IRI;
    ] ;
  sh:property [
      sh:path skos:closeMatch ;
       sh:nodeKind sh:IRI;
    ] ;
  sh:property [
      sh:path schema:sameAs ;
       sh:nodeKind sh:IRI;
    ] ;
  sh:property [
      sh:path owl:equivalentClass;
       sh:nodeKind sh:IRI;
    ] ;
.
